// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xrQpW8wcnxqzeWKwZKyWgS
// Component: yPRC4IiGHrhu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: xrQpW8wcnxqzeWKwZKyWgS/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: yPRC4IiGHrhu/css

import CellularConnectionIcon from "./icons/PlasmicIcon__CellularConnection"; // plasmic-import: s6yxNdbjhY68/icon
import WifiIcon from "./icons/PlasmicIcon__Wifi"; // plasmic-import: 5-kLl6s-AiVw/icon
import CapIcon from "./icons/PlasmicIcon__Cap"; // plasmic-import: PRqOCL8TfOV_/icon

createPlasmicElementProxy;

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: Flex__<"div">;
  examplesActionSheetIPhone?: Flex__<"div">;
  contents?: Flex__<"div">;
  navigationBar?: Flex__<"div">;
  materials?: Flex__<"div">;
  chrome?: Flex__<"div">;
  statusBarIPhone?: Flex__<"div">;
  frame?: Flex__<"div">;
  time?: Flex__<"div">;
  time2?: Flex__<"div">;
  dynamicIslandSpacer?: Flex__<"div">;
  levels?: Flex__<"div">;
  battery?: Flex__<"div">;
  border?: Flex__<"div">;
  capacity?: Flex__<"div">;
  contents2?: Flex__<"div">;
  prompt?: Flex__<"div">;
  prompt2?: Flex__<"div">;
  prompt3?: Flex__<"div">;
  titleAndControls?: Flex__<"div">;
  leading?: Flex__<"div">;
  Button1?: Flex__<"div">;
  chevron?: Flex__<"div">;
  trailing?: Flex__<"div">;
  Button2?: Flex__<"div">;
  _?: Flex__<"div">;
  searchField?: Flex__<"div">;
  searchField2?: Flex__<"div">;
  searchGlyph?: Flex__<"div">;
  placeholderLabel?: Flex__<"div">;
  dictation?: Flex__<"div">;
  contentArea?: Flex__<"div">;
  actionSheetIPhone?: Flex__<"div">;
  headerAndButtons?: Flex__<"div">;
  materials2?: Flex__<"div">;
  titleAndDescription?: Flex__<"div">;
  button3?: Flex__<"div">;
  title?: Flex__<"div">;
  button4?: Flex__<"div">;
  title2?: Flex__<"div">;
  button5?: Flex__<"div">;
  title3?: Flex__<"div">;
  button6?: Flex__<"div">;
  title4?: Flex__<"div">;
  button7?: Flex__<"div">;
  title5?: Flex__<"div">;
  button8?: Flex__<"div">;
  title6?: Flex__<"div">;
  button9?: Flex__<"div">;
  title7?: Flex__<"div">;
  cancelButton?: Flex__<"div">;
  materials3?: Flex__<"div">;
  thick?: Flex__<"div">;
  title8?: Flex__<"div">;
  title9?: Flex__<"div">;
  homeIndicator?: Flex__<"div">;
  homeIndicator2?: Flex__<"div">;
  iPhone16ProBlackTitaniumPortrait?: Flex__<"div">;
};

export interface DefaultNewPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"examplesActionSheetIPhone"}
            data-plasmic-override={overrides.examplesActionSheetIPhone}
            className={classNames(
              projectcss.all,
              sty.examplesActionSheetIPhone
            )}
          >
            <div
              data-plasmic-name={"contents"}
              data-plasmic-override={overrides.contents}
              className={classNames(projectcss.all, sty.contents)}
            >
              <div
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                className={classNames(projectcss.all, sty.navigationBar)}
              >
                <div
                  data-plasmic-name={"materials"}
                  data-plasmic-override={overrides.materials}
                  className={classNames(projectcss.all, sty.materials)}
                >
                  <div
                    data-plasmic-name={"chrome"}
                    data-plasmic-override={overrides.chrome}
                    className={classNames(projectcss.all, sty.chrome)}
                  />
                </div>
                <div
                  data-plasmic-name={"statusBarIPhone"}
                  data-plasmic-override={overrides.statusBarIPhone}
                  className={classNames(projectcss.all, sty.statusBarIPhone)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame"}
                    data-plasmic-override={overrides.frame}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"time"}
                      data-plasmic-override={overrides.time}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.time)}
                    >
                      <div
                        data-plasmic-name={"time2"}
                        data-plasmic-override={overrides.time2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.time2
                        )}
                      >
                        {"9:41"}
                      </div>
                    </Stack__>
                    <div
                      data-plasmic-name={"dynamicIslandSpacer"}
                      data-plasmic-override={overrides.dynamicIslandSpacer}
                      className={classNames(
                        projectcss.all,
                        sty.dynamicIslandSpacer
                      )}
                    />

                    <Stack__
                      as={"div"}
                      data-plasmic-name={"levels"}
                      data-plasmic-override={overrides.levels}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.levels)}
                    >
                      <CellularConnectionIcon
                        className={classNames(projectcss.all, sty.svg___1Joe1)}
                        role={"img"}
                      />

                      <WifiIcon
                        className={classNames(projectcss.all, sty.svg__gWjLx)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"battery"}
                        data-plasmic-override={overrides.battery}
                        className={classNames(projectcss.all, sty.battery)}
                      >
                        <div
                          data-plasmic-name={"border"}
                          data-plasmic-override={overrides.border}
                          className={classNames(projectcss.all, sty.border)}
                        />

                        <CapIcon
                          className={classNames(projectcss.all, sty.svg___0Cpt)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"capacity"}
                          data-plasmic-override={overrides.capacity}
                          className={classNames(projectcss.all, sty.capacity)}
                        />
                      </div>
                    </Stack__>
                  </Stack__>
                </div>
                <div
                  data-plasmic-name={"contents2"}
                  data-plasmic-override={overrides.contents2}
                  className={classNames(projectcss.all, sty.contents2)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"prompt"}
                      data-plasmic-override={overrides.prompt}
                      className={classNames(projectcss.all, sty.prompt)}
                    >
                      <div
                        data-plasmic-name={"prompt2"}
                        data-plasmic-override={overrides.prompt2}
                        className={classNames(projectcss.all, sty.prompt2)}
                      >
                        <div
                          data-plasmic-name={"prompt3"}
                          data-plasmic-override={overrides.prompt3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.prompt3
                          )}
                        >
                          {"This is a prompt message."}
                        </div>
                      </div>
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"titleAndControls"}
                    data-plasmic-override={overrides.titleAndControls}
                    className={classNames(projectcss.all, sty.titleAndControls)}
                  >
                    <div
                      data-plasmic-name={"leading"}
                      data-plasmic-override={overrides.leading}
                      className={classNames(projectcss.all, sty.leading)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"Button1"}
                        data-plasmic-override={overrides.Button1}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.button1)}
                      >
                        <div
                          data-plasmic-name={"chevron"}
                          data-plasmic-override={overrides.chevron}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.chevron
                          )}
                        >
                          {"\udbc0\udd89"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u7CTc
                          )}
                        >
                          {"Label"}
                        </div>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vy99I
                      )}
                    >
                      {"Title"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"trailing"}
                      data-plasmic-override={overrides.trailing}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.trailing)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"Button2"}
                        data-plasmic-override={overrides.Button2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.button2)}
                      >
                        <div
                          data-plasmic-name={"_"}
                          data-plasmic-override={overrides._}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty._
                          )}
                        >
                          {"\udbc0\ude11"}
                        </div>
                      </Stack__>
                    </Stack__>
                  </div>
                  {false ? (
                    <div
                      data-plasmic-name={"searchField"}
                      data-plasmic-override={overrides.searchField}
                      className={classNames(projectcss.all, sty.searchField)}
                    >
                      <div
                        data-plasmic-name={"searchField2"}
                        data-plasmic-override={overrides.searchField2}
                        className={classNames(projectcss.all, sty.searchField2)}
                      >
                        <div
                          data-plasmic-name={"searchGlyph"}
                          data-plasmic-override={overrides.searchGlyph}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.searchGlyph
                          )}
                        >
                          {"\udbc0\udeab"}
                        </div>
                        <div
                          data-plasmic-name={"placeholderLabel"}
                          data-plasmic-override={overrides.placeholderLabel}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.placeholderLabel
                          )}
                        >
                          {"Search"}
                        </div>
                        <div
                          data-plasmic-name={"dictation"}
                          data-plasmic-override={overrides.dictation}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.dictation
                          )}
                        >
                          {"\udbc0\udeb1"}
                        </div>
                      </div>
                    </div>
                  ) : null}
                </div>
              </div>
              <div
                data-plasmic-name={"contentArea"}
                data-plasmic-override={overrides.contentArea}
                className={classNames(projectcss.all, sty.contentArea)}
              />
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"actionSheetIPhone"}
              data-plasmic-override={overrides.actionSheetIPhone}
              hasGap={true}
              className={classNames(projectcss.all, sty.actionSheetIPhone)}
            >
              <div
                data-plasmic-name={"headerAndButtons"}
                data-plasmic-override={overrides.headerAndButtons}
                className={classNames(projectcss.all, sty.headerAndButtons)}
              >
                <div
                  data-plasmic-name={"materials2"}
                  data-plasmic-override={overrides.materials2}
                  className={classNames(projectcss.all, sty.materials2)}
                />

                <Stack__
                  as={"div"}
                  data-plasmic-name={"titleAndDescription"}
                  data-plasmic-override={overrides.titleAndDescription}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.titleAndDescription
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o9JoO
                    )}
                  >
                    {"A Short Title is Best"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zsGcr
                    )}
                  >
                    {"A message should be a short, complete sentence."}
                  </div>
                </Stack__>
                <div
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames(projectcss.all, sty.button3)}
                >
                  <div
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.title
                    )}
                  >
                    {"Action"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"button4"}
                  data-plasmic-override={overrides.button4}
                  className={classNames(projectcss.all, sty.button4)}
                >
                  <div
                    data-plasmic-name={"title2"}
                    data-plasmic-override={overrides.title2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.title2
                    )}
                  >
                    {"Action"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"button5"}
                  data-plasmic-override={overrides.button5}
                  className={classNames(projectcss.all, sty.button5)}
                >
                  <div
                    data-plasmic-name={"title3"}
                    data-plasmic-override={overrides.title3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.title3
                    )}
                  >
                    {"Action"}
                  </div>
                </div>
                {false ? (
                  <div
                    data-plasmic-name={"button6"}
                    data-plasmic-override={overrides.button6}
                    className={classNames(projectcss.all, sty.button6)}
                  >
                    <div
                      data-plasmic-name={"title4"}
                      data-plasmic-override={overrides.title4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title4
                      )}
                    >
                      {"Action"}
                    </div>
                  </div>
                ) : null}
                {false ? (
                  <div
                    data-plasmic-name={"button7"}
                    data-plasmic-override={overrides.button7}
                    className={classNames(projectcss.all, sty.button7)}
                  >
                    <div
                      data-plasmic-name={"title5"}
                      data-plasmic-override={overrides.title5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title5
                      )}
                    >
                      {"Action"}
                    </div>
                  </div>
                ) : null}
                {false ? (
                  <div
                    data-plasmic-name={"button8"}
                    data-plasmic-override={overrides.button8}
                    className={classNames(projectcss.all, sty.button8)}
                  >
                    <div
                      data-plasmic-name={"title6"}
                      data-plasmic-override={overrides.title6}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title6
                      )}
                    >
                      {"Disabled Action"}
                    </div>
                  </div>
                ) : null}
                {false ? (
                  <div
                    data-plasmic-name={"button9"}
                    data-plasmic-override={overrides.button9}
                    className={classNames(projectcss.all, sty.button9)}
                  >
                    <div
                      data-plasmic-name={"title7"}
                      data-plasmic-override={overrides.title7}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title7
                      )}
                    >
                      {"Destructive Action"}
                    </div>
                  </div>
                ) : null}
              </div>
              <div
                data-plasmic-name={"cancelButton"}
                data-plasmic-override={overrides.cancelButton}
                className={classNames(projectcss.all, sty.cancelButton)}
              >
                <div
                  data-plasmic-name={"materials3"}
                  data-plasmic-override={overrides.materials3}
                  className={classNames(projectcss.all, sty.materials3)}
                >
                  <div
                    data-plasmic-name={"thick"}
                    data-plasmic-override={overrides.thick}
                    className={classNames(projectcss.all, sty.thick)}
                  />
                </div>
                <div
                  data-plasmic-name={"title8"}
                  data-plasmic-override={overrides.title8}
                  className={classNames(projectcss.all, sty.title8)}
                >
                  <div
                    data-plasmic-name={"title9"}
                    data-plasmic-override={overrides.title9}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.title9
                    )}
                  >
                    {"Cancel"}
                  </div>
                </div>
              </div>
            </Stack__>
            <div
              data-plasmic-name={"homeIndicator"}
              data-plasmic-override={overrides.homeIndicator}
              className={classNames(projectcss.all, sty.homeIndicator)}
            >
              <div
                data-plasmic-name={"homeIndicator2"}
                data-plasmic-override={overrides.homeIndicator2}
                className={classNames(projectcss.all, sty.homeIndicator2)}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"iPhone16ProBlackTitaniumPortrait"}
            data-plasmic-override={overrides.iPhone16ProBlackTitaniumPortrait}
            className={classNames(
              projectcss.all,
              sty.iPhone16ProBlackTitaniumPortrait
            )}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "examplesActionSheetIPhone",
    "contents",
    "navigationBar",
    "materials",
    "chrome",
    "statusBarIPhone",
    "frame",
    "time",
    "time2",
    "dynamicIslandSpacer",
    "levels",
    "battery",
    "border",
    "capacity",
    "contents2",
    "prompt",
    "prompt2",
    "prompt3",
    "titleAndControls",
    "leading",
    "Button1",
    "chevron",
    "trailing",
    "Button2",
    "_",
    "searchField",
    "searchField2",
    "searchGlyph",
    "placeholderLabel",
    "dictation",
    "contentArea",
    "actionSheetIPhone",
    "headerAndButtons",
    "materials2",
    "titleAndDescription",
    "button3",
    "title",
    "button4",
    "title2",
    "button5",
    "title3",
    "button6",
    "title4",
    "button7",
    "title5",
    "button8",
    "title6",
    "button9",
    "title7",
    "cancelButton",
    "materials3",
    "thick",
    "title8",
    "title9",
    "homeIndicator",
    "homeIndicator2",
    "iPhone16ProBlackTitaniumPortrait"
  ],
  examplesActionSheetIPhone: [
    "examplesActionSheetIPhone",
    "contents",
    "navigationBar",
    "materials",
    "chrome",
    "statusBarIPhone",
    "frame",
    "time",
    "time2",
    "dynamicIslandSpacer",
    "levels",
    "battery",
    "border",
    "capacity",
    "contents2",
    "prompt",
    "prompt2",
    "prompt3",
    "titleAndControls",
    "leading",
    "Button1",
    "chevron",
    "trailing",
    "Button2",
    "_",
    "searchField",
    "searchField2",
    "searchGlyph",
    "placeholderLabel",
    "dictation",
    "contentArea",
    "actionSheetIPhone",
    "headerAndButtons",
    "materials2",
    "titleAndDescription",
    "button3",
    "title",
    "button4",
    "title2",
    "button5",
    "title3",
    "button6",
    "title4",
    "button7",
    "title5",
    "button8",
    "title6",
    "button9",
    "title7",
    "cancelButton",
    "materials3",
    "thick",
    "title8",
    "title9",
    "homeIndicator",
    "homeIndicator2"
  ],
  contents: [
    "contents",
    "navigationBar",
    "materials",
    "chrome",
    "statusBarIPhone",
    "frame",
    "time",
    "time2",
    "dynamicIslandSpacer",
    "levels",
    "battery",
    "border",
    "capacity",
    "contents2",
    "prompt",
    "prompt2",
    "prompt3",
    "titleAndControls",
    "leading",
    "Button1",
    "chevron",
    "trailing",
    "Button2",
    "_",
    "searchField",
    "searchField2",
    "searchGlyph",
    "placeholderLabel",
    "dictation",
    "contentArea"
  ],
  navigationBar: [
    "navigationBar",
    "materials",
    "chrome",
    "statusBarIPhone",
    "frame",
    "time",
    "time2",
    "dynamicIslandSpacer",
    "levels",
    "battery",
    "border",
    "capacity",
    "contents2",
    "prompt",
    "prompt2",
    "prompt3",
    "titleAndControls",
    "leading",
    "Button1",
    "chevron",
    "trailing",
    "Button2",
    "_",
    "searchField",
    "searchField2",
    "searchGlyph",
    "placeholderLabel",
    "dictation"
  ],
  materials: ["materials", "chrome"],
  chrome: ["chrome"],
  statusBarIPhone: [
    "statusBarIPhone",
    "frame",
    "time",
    "time2",
    "dynamicIslandSpacer",
    "levels",
    "battery",
    "border",
    "capacity"
  ],
  frame: [
    "frame",
    "time",
    "time2",
    "dynamicIslandSpacer",
    "levels",
    "battery",
    "border",
    "capacity"
  ],
  time: ["time", "time2"],
  time2: ["time2"],
  dynamicIslandSpacer: ["dynamicIslandSpacer"],
  levels: ["levels", "battery", "border", "capacity"],
  battery: ["battery", "border", "capacity"],
  border: ["border"],
  capacity: ["capacity"],
  contents2: [
    "contents2",
    "prompt",
    "prompt2",
    "prompt3",
    "titleAndControls",
    "leading",
    "Button1",
    "chevron",
    "trailing",
    "Button2",
    "_",
    "searchField",
    "searchField2",
    "searchGlyph",
    "placeholderLabel",
    "dictation"
  ],
  prompt: ["prompt", "prompt2", "prompt3"],
  prompt2: ["prompt2", "prompt3"],
  prompt3: ["prompt3"],
  titleAndControls: [
    "titleAndControls",
    "leading",
    "Button1",
    "chevron",
    "trailing",
    "Button2",
    "_"
  ],
  leading: ["leading", "Button1", "chevron"],
  Button1: ["Button1", "chevron"],
  chevron: ["chevron"],
  trailing: ["trailing", "Button2", "_"],
  Button2: ["Button2", "_"],
  _: ["_"],
  searchField: [
    "searchField",
    "searchField2",
    "searchGlyph",
    "placeholderLabel",
    "dictation"
  ],
  searchField2: [
    "searchField2",
    "searchGlyph",
    "placeholderLabel",
    "dictation"
  ],
  searchGlyph: ["searchGlyph"],
  placeholderLabel: ["placeholderLabel"],
  dictation: ["dictation"],
  contentArea: ["contentArea"],
  actionSheetIPhone: [
    "actionSheetIPhone",
    "headerAndButtons",
    "materials2",
    "titleAndDescription",
    "button3",
    "title",
    "button4",
    "title2",
    "button5",
    "title3",
    "button6",
    "title4",
    "button7",
    "title5",
    "button8",
    "title6",
    "button9",
    "title7",
    "cancelButton",
    "materials3",
    "thick",
    "title8",
    "title9"
  ],
  headerAndButtons: [
    "headerAndButtons",
    "materials2",
    "titleAndDescription",
    "button3",
    "title",
    "button4",
    "title2",
    "button5",
    "title3",
    "button6",
    "title4",
    "button7",
    "title5",
    "button8",
    "title6",
    "button9",
    "title7"
  ],
  materials2: ["materials2"],
  titleAndDescription: ["titleAndDescription"],
  button3: ["button3", "title"],
  title: ["title"],
  button4: ["button4", "title2"],
  title2: ["title2"],
  button5: ["button5", "title3"],
  title3: ["title3"],
  button6: ["button6", "title4"],
  title4: ["title4"],
  button7: ["button7", "title5"],
  title5: ["title5"],
  button8: ["button8", "title6"],
  title6: ["title6"],
  button9: ["button9", "title7"],
  title7: ["title7"],
  cancelButton: ["cancelButton", "materials3", "thick", "title8", "title9"],
  materials3: ["materials3", "thick"],
  thick: ["thick"],
  title8: ["title8", "title9"],
  title9: ["title9"],
  homeIndicator: ["homeIndicator", "homeIndicator2"],
  homeIndicator2: ["homeIndicator2"],
  iPhone16ProBlackTitaniumPortrait: ["iPhone16ProBlackTitaniumPortrait"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  examplesActionSheetIPhone: "div";
  contents: "div";
  navigationBar: "div";
  materials: "div";
  chrome: "div";
  statusBarIPhone: "div";
  frame: "div";
  time: "div";
  time2: "div";
  dynamicIslandSpacer: "div";
  levels: "div";
  battery: "div";
  border: "div";
  capacity: "div";
  contents2: "div";
  prompt: "div";
  prompt2: "div";
  prompt3: "div";
  titleAndControls: "div";
  leading: "div";
  Button1: "div";
  chevron: "div";
  trailing: "div";
  Button2: "div";
  _: "div";
  searchField: "div";
  searchField2: "div";
  searchGlyph: "div";
  placeholderLabel: "div";
  dictation: "div";
  contentArea: "div";
  actionSheetIPhone: "div";
  headerAndButtons: "div";
  materials2: "div";
  titleAndDescription: "div";
  button3: "div";
  title: "div";
  button4: "div";
  title2: "div";
  button5: "div";
  title3: "div";
  button6: "div";
  title4: "div";
  button7: "div";
  title5: "div";
  button8: "div";
  title6: "div";
  button9: "div";
  title7: "div";
  cancelButton: "div";
  materials3: "div";
  thick: "div";
  title8: "div";
  title9: "div";
  homeIndicator: "div";
  homeIndicator2: "div";
  iPhone16ProBlackTitaniumPortrait: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    examplesActionSheetIPhone: makeNodeComponent("examplesActionSheetIPhone"),
    contents: makeNodeComponent("contents"),
    navigationBar: makeNodeComponent("navigationBar"),
    materials: makeNodeComponent("materials"),
    chrome: makeNodeComponent("chrome"),
    statusBarIPhone: makeNodeComponent("statusBarIPhone"),
    frame: makeNodeComponent("frame"),
    time: makeNodeComponent("time"),
    time2: makeNodeComponent("time2"),
    dynamicIslandSpacer: makeNodeComponent("dynamicIslandSpacer"),
    levels: makeNodeComponent("levels"),
    battery: makeNodeComponent("battery"),
    border: makeNodeComponent("border"),
    capacity: makeNodeComponent("capacity"),
    contents2: makeNodeComponent("contents2"),
    prompt: makeNodeComponent("prompt"),
    prompt2: makeNodeComponent("prompt2"),
    prompt3: makeNodeComponent("prompt3"),
    titleAndControls: makeNodeComponent("titleAndControls"),
    leading: makeNodeComponent("leading"),
    Button1: makeNodeComponent("Button1"),
    chevron: makeNodeComponent("chevron"),
    trailing: makeNodeComponent("trailing"),
    Button2: makeNodeComponent("Button2"),
    _: makeNodeComponent("_"),
    searchField: makeNodeComponent("searchField"),
    searchField2: makeNodeComponent("searchField2"),
    searchGlyph: makeNodeComponent("searchGlyph"),
    placeholderLabel: makeNodeComponent("placeholderLabel"),
    dictation: makeNodeComponent("dictation"),
    contentArea: makeNodeComponent("contentArea"),
    actionSheetIPhone: makeNodeComponent("actionSheetIPhone"),
    headerAndButtons: makeNodeComponent("headerAndButtons"),
    materials2: makeNodeComponent("materials2"),
    titleAndDescription: makeNodeComponent("titleAndDescription"),
    button3: makeNodeComponent("button3"),
    title: makeNodeComponent("title"),
    button4: makeNodeComponent("button4"),
    title2: makeNodeComponent("title2"),
    button5: makeNodeComponent("button5"),
    title3: makeNodeComponent("title3"),
    button6: makeNodeComponent("button6"),
    title4: makeNodeComponent("title4"),
    button7: makeNodeComponent("button7"),
    title5: makeNodeComponent("title5"),
    button8: makeNodeComponent("button8"),
    title6: makeNodeComponent("title6"),
    button9: makeNodeComponent("button9"),
    title7: makeNodeComponent("title7"),
    cancelButton: makeNodeComponent("cancelButton"),
    materials3: makeNodeComponent("materials3"),
    thick: makeNodeComponent("thick"),
    title8: makeNodeComponent("title8"),
    title9: makeNodeComponent("title9"),
    homeIndicator: makeNodeComponent("homeIndicator"),
    homeIndicator2: makeNodeComponent("homeIndicator2"),
    iPhone16ProBlackTitaniumPortrait: makeNodeComponent(
      "iPhone16ProBlackTitaniumPortrait"
    ),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
